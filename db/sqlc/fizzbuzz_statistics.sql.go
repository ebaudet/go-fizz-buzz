// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: fizzbuzz_statistics.sql

package db

import (
	"context"
	"encoding/json"
)

const getMostUsedRequest = `-- name: GetMostUsedRequest :one
SELECT request, count, updated_at, created_at FROM fizzbuzz_statistics
ORDER BY count DESC
LIMIT 1
`

func (q *Queries) GetMostUsedRequest(ctx context.Context) (FizzbuzzStatistic, error) {
	row := q.db.QueryRowContext(ctx, getMostUsedRequest)
	var i FizzbuzzStatistic
	err := row.Scan(
		&i.Request,
		&i.Count,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const incrementRequest = `-- name: IncrementRequest :one
INSERT INTO fizzbuzz_statistics (
  request, count
) VALUES (
  $1, 1
) ON CONFLICT (request) DO
UPDATE SET
  count = fizzbuzz_statistics.count + 1,
  updated_at = now()
RETURNING request, count, updated_at, created_at
`

func (q *Queries) IncrementRequest(ctx context.Context, request json.RawMessage) (FizzbuzzStatistic, error) {
	row := q.db.QueryRowContext(ctx, incrementRequest, request)
	var i FizzbuzzStatistic
	err := row.Scan(
		&i.Request,
		&i.Count,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
